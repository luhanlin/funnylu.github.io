<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>funny lu</title>
  
  <subtitle>Mr.lu&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://funnylu.top/"/>
  <updated>2019-09-16T05:58:54.554Z</updated>
  <id>http://funnylu.top/</id>
  
  <author>
    <name>funny lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 流程控制</title>
    <link href="http://funnylu.top/python/20190916-null.html"/>
    <id>http://funnylu.top/python/20190916-null.html</id>
    <published>2019-09-16T05:45:30.000Z</published>
    <updated>2019-09-16T05:58:54.554Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python%E7%8C%AB.jpg" alt="Python 流程控制 不要看我"></p><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。<br><a id="more"></a></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>流程控制语句中可能最为人所熟知的编程语句就是 if 语句了，if 语句用于有条件的执行，语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if_stmt ::=  &quot;if&quot; expression &quot;:&quot; suite</span><br><span class="line">             (&quot;elif&quot; expression &quot;:&quot; suite)*</span><br><span class="line">             [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure></p><p>它通过对表达式逐个求值直至找到一个真值在子句体中选择唯一匹配的一个；然后执行该子句体（而且 if 语句的其他部分不会被执行或求值）。 如果所有表达式均为假值，则如果 else 子句体如果存在就会被执行。<br>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = int(input(&quot;Please enter an integer: &quot;))</span><br><span class="line"></span><br><span class="line"># TypeError: can only concatenate str (not &quot;int&quot;) to str</span><br><span class="line"># print(&quot;输入的值为：&quot; + x) </span><br><span class="line">print(&apos;输入的值为：&apos; + str(x))</span><br><span class="line"></span><br><span class="line">if x &lt; 0:</span><br><span class="line">    x = 0</span><br><span class="line">    print(&apos;输入数字不可以小于0&apos;)</span><br><span class="line">elif x == 0:</span><br><span class="line">    print(&apos;zero&apos;)</span><br><span class="line">elif x == 1:</span><br><span class="line">    print(&apos;one&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;other&apos;)</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for 语句用于对序列（例如字符串、元组或列表）或其他可迭代对象中的元素进行迭代，语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_stmt ::=  &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite</span><br><span class="line">              [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure></p><p>for循环可以遍历任何序列的项目，如一个列表或者一个字符串，举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Measure some strings:</span><br><span class="line">words = [&apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]</span><br><span class="line">for w in words:</span><br><span class="line">    print(w, len(w))</span><br><span class="line"># output:</span><br><span class="line">#cat 3</span><br><span class="line">#window 6</span><br><span class="line">#defenestrate 12</span><br><span class="line"></span><br><span class="line">for w in words[:]:  # Loop over a slice copy of the entire list.</span><br><span class="line">    if len(w) &gt; 6:</span><br><span class="line">        words.insert(0, w)</span><br><span class="line"></span><br><span class="line">print(words)</span><br><span class="line"># output:</span><br><span class="line"># [&apos;defenestrate&apos;, &apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]</span><br></pre></td></tr></table></figure><p>如果你确实需要遍历一个数字序列，可以使用 <em>rang()</em> 函数，例如计算100以内数字之和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br><span class="line"># output: </span><br><span class="line"># 5050</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>与 for 循环对应的就是 while 循环，while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务.举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 裴波那契数列</span><br><span class="line">a = 0</span><br><span class="line">b = 1</span><br><span class="line">while a &lt; 100:</span><br><span class="line">    print(a, end=&apos;,&apos;)</span><br><span class="line">    a = b</span><br><span class="line">    b = a+b</span><br><span class="line"># 0,1,1,2,3,5,8,13,21,34,55,89,</span><br></pre></td></tr></table></figure><p>while 与 else 结合使用，与if 条件判断一样类似，在上面例子基础上加上else：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 裴波那契数列</span><br><span class="line">a, b = 0, 1</span><br><span class="line">while a &lt; 100:</span><br><span class="line">    print(a, end=&apos;,&apos;)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">else:</span><br><span class="line">    print(&apos;\nwhile ... else test&apos;)</span><br><span class="line"># 0,1,1,2,3,5,8,13,21,34,55,89,</span><br><span class="line"># while ... else test</span><br></pre></td></tr></table></figure><blockquote><p>注：for 循环与 while 循环都可以与关键字 else 结合使用。</p></blockquote><h3 id="break-与-continue-关键字"><a href="#break-与-continue-关键字" class="headerlink" title="break 与 continue 关键字"></a>break 与 continue 关键字</h3><blockquote><p>break 语句，与java类似，用于跳出最近的 for 或 while 循环。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># beak test</span><br><span class="line">for a in range(100001):</span><br><span class="line">    if a &gt; 1000:</span><br><span class="line">        print(a)</span><br><span class="line">        break</span><br><span class="line"># 1001</span><br></pre></td></tr></table></figure><blockquote><p>continue 语句也与java类似，表示继续循环中的下一次迭代。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># continue test</span><br><span class="line">for y in range(1, 5):</span><br><span class="line">    if y % 2 == 0:</span><br><span class="line">        print(&apos;continue test &apos;, y)</span><br><span class="line">        continue</span><br><span class="line">    print(&apos;normal print &apos;, y)</span><br><span class="line"># normal print  1</span><br><span class="line"># continue test  2</span><br><span class="line"># normal print  3</span><br><span class="line"># continue test  4</span><br></pre></td></tr></table></figure><h3 id="pass-关键字"><a href="#pass-关键字" class="headerlink" title="pass 关键字"></a>pass 关键字</h3><p>pass 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    pass  # Busy-wait for keyboard interrupt (Ctrl+C)</span><br></pre></td></tr></table></figure><p>这通常用于创建最小的类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyEmptyClass:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>pass 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件子句体的占位符，允许你保持在更抽象的层次上进行思考。（类似于java中的抽象方法） pass 会被静默地忽略:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def initlog(*args):</span><br><span class="line">    pass   # Remember to implement this!</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程控制中的条件判断和循环执行重复计算是我们开发软件的必备基础，本节参考官网列举了python中循环控制语句常用的关键字和使用技巧，大家一起共勉。</p><h2 id="代码地址："><a href="#代码地址：" class="headerlink" title="代码地址："></a>代码地址：</h2><p><a href="https://github.com/luhanlin/python_study/tree/master/com/luhanlin/controflow" rel="external nofollow noopener noreferrer" target="_blank">Python 流程控制代码地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python%E7%8C%AB.jpg&quot; alt=&quot;Python 流程控制 不要看我&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://funnylu.top/categories/python/"/>
    
    
      <category term="python" scheme="http://funnylu.top/tags/python/"/>
    
      <category term="大数据" scheme="http://funnylu.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Having a joke</title>
    <link href="http://funnylu.top/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97/20190509-joke.html"/>
    <id>http://funnylu.top/生活杂志/20190509-joke.html</id>
    <published>2019-05-09T12:16:41.930Z</published>
    <updated>2019-05-15T12:55:32.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/head.jpeg" alt="test"><br><strong>有趣的测试 一个都比的日常</strong></p><a id="more"></a><h2 id="微信撩妹套路之经典开场白"><a href="#微信撩妹套路之经典开场白" class="headerlink" title="微信撩妹套路之经典开场白"></a>微信撩妹套路之经典开场白</h2><hr><h3 id="声东击西法"><a href="#声东击西法" class="headerlink" title="声东击西法"></a>声东击西法</h3><ul><li>给她发去三个字“你神经”或者你坏蛋，对方这时肯定会觉得纳闷，一定会回复你。虽然你不认识她，但是为了引起她的注意，这是一个不错的选择。</li></ul><h3 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h3><ul><li>如你的第几张相片好像是传说中的几，或者你第几张图的这个地方我也有去过，你的第几张图的那个东西在哪买的等等，记住，说完后一定要加上自己的感受和见解(这个开场白一般适用于图片有亮点的女生)。</li></ul><h3 id="赞美和关心"><a href="#赞美和关心" class="headerlink" title="赞美和关心"></a>赞美和关心</h3><ul><li>有的女生的图片中有小狗小猫，还有小朋友的，可以适当的赞美一下，你的小狗好可爱阿，样子好萌，有多大了?小朋友好可爱哦，看你的样子应该是很喜欢小朋友的吧/你的样子很和善，应该很受小朋友喜欢吧。记住，赞美完后，一定要问对方的意见和看法。不然有的女生在你赞美完她过后，她会认为你是在故意恭维她，一般会看都不看就略过了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/head.jpeg&quot; alt=&quot;test&quot;&gt;&lt;br&gt;&lt;strong&gt;有趣的测试 一个都比的日常&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活杂志" scheme="http://funnylu.top/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97/"/>
    
    
      <category term="日常" scheme="http://funnylu.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
