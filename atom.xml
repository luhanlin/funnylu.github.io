<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>funny lu</title>
  
  <subtitle>Mr.lu&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://funnylu.top/"/>
  <updated>2019-09-28T02:08:01.766Z</updated>
  <id>http://funnylu.top/</id>
  
  <author>
    <name>funny lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 高阶函数</title>
    <link href="http://funnylu.top/python/20190928-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html"/>
    <id>http://funnylu.top/python/20190928-高阶函数.html</id>
    <published>2019-09-28T01:56:00.000Z</published>
    <updated>2019-09-28T02:08:01.766Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python.png" alt="python 高阶函数"></p><p>函数式编程现在逐渐被广大开发群体接受，越来越多的开发者门开始使用这种优雅的开发模式，而我们使用函数式编程最主要的是需要清楚：</p><ol><li>什么是高阶函数（<strong>Higher-order Functions</strong>）？</li><li>Python 中高阶函数有哪些？要怎么用？</li></ol><a id="more"></a><h2 id="高阶函数概念"><a href="#高阶函数概念" class="headerlink" title="高阶函数概念"></a>高阶函数概念</h2><p>在函数式编程中，我们可以将函数当作变量一样自由使用。一个函数接收另一个函数作为参数，这种函数称之为高阶函数。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_func</span><span class="params">(f, arr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [f(x) <span class="keyword">for</span> x <span class="keyword">in</span> arr]</span><br></pre></td></tr></table></figure><p>上面的例子中， <code>high_func</code>  就是一个高阶函数。其中第一个参数  <code>f</code>  是一个函数，第二个参数  <code>arr</code>  是一个数组，返回的值是数组中的所有的值在经过  <code>f</code>  函数计算后得到的一个列表。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_func</span><span class="params">(f, arr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [f(x) <span class="keyword">for</span> x <span class="keyword">in</span> arr]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用python自带数学函数</span></span><br><span class="line">print(high_func(factorial, list(range(<span class="number">10</span>))))</span><br><span class="line"><span class="comment"># print out: [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义函数</span></span><br><span class="line">print(high_func(square, list(range(<span class="number">10</span>))))</span><br><span class="line"><span class="comment"># print out: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><h2 id="Python-常用高阶函数"><a href="#Python-常用高阶函数" class="headerlink" title="Python 常用高阶函数"></a>Python 常用高阶函数</h2><p>如同java、scala等语言，我们很多常用的高阶函数基本都一致。在开发中我们经常使用的最基本的高阶函数其实就几个，而我们也可以基于这些函数去进行适当的扩展，那么下面开始介绍几种常用的高阶函数。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>Make an iterator that computes the function using arguments from each of the iterables.  Stops when the shortest iterable is exhausted.</p></blockquote><p>根据提供的函数对指定序列做映射, 并返回映射后的序列，定义：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(func, *iterables) --&gt; map object</span><br></pre></td></tr></table></figure><ul><li><code>function</code>  # 序列中的每个元素需要执行的操作, 可以是匿名函数</li><li><code>*iterables</code>  # 一个或多个序列</li></ul><p>正如前面所举的例子  <code>high_func</code> 函数， <code>map</code>  函数是  <code>high_func</code> 函数高阶版，可以传入一个函数和多个序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用python自带数学函数</span></span><br><span class="line">facMap = map(factorial, list(range(<span class="number">10</span>)))</span><br><span class="line">print(list(facMap))</span><br><span class="line"><span class="comment"># print out: [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义函数</span></span><br><span class="line">squareMap = map(square, list(range(<span class="number">10</span>)))</span><br><span class="line">print(list(squareMap))</span><br><span class="line"><span class="comment"># print out: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>可以看到输出了同样的结果，只是与  <code>python2.X</code>  不用的是，  <code>python3.X</code>  中返回  <code>map</code> 类<br>，而前者直接返回一个列表。</p><p>我们使用匿名函数，也可以传入多个序列，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用匿名函数</span></span><br><span class="line">lamMap = map(<span class="keyword">lambda</span> x: x * <span class="number">2</span>, list(range(<span class="number">10</span>)))</span><br><span class="line">print(list(lamMap))</span><br><span class="line"><span class="comment"># print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入多个序列</span></span><br><span class="line">mutiMap = map(<span class="keyword">lambda</span> x, y: x+y, list(range(<span class="number">10</span>)), list(range(<span class="number">11</span>, <span class="number">15</span>)))</span><br><span class="line">print(list(mutiMap))</span><br><span class="line"><span class="comment"># print out: [11, 13, 15, 17]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p><em>Apply a function of two arguments cumulatively to the items of a sequence,from left to right, so as to reduce the sequence to a single value</em>.</p></blockquote><p>大致上来讲， <code>reduce</code>  函数需要传入一个有两个参数的函数，然后用这个函数从左至右顺序遍历序列并生成结果，定义如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, sequence[, initial]) -&gt; value</span><br></pre></td></tr></table></figure><ul><li><code>function</code>  # 函数, 序列中的每个元素需要执行的操作, 可以是匿名函数</li><li><code>sequence</code>  # 需要执行操作的序列</li><li><code>initial</code>  # 可选，初始参数</li></ul><p>最后返回函数的计算结果, 和初始参数类型相同</p><p>简单举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意，现在 reduce() 函数已经放入到functools包中。</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># print out 15</span></span><br></pre></td></tr></table></figure><p>我们可以看到，序列  <code>[1, 2, 3, 4, 5]</code>  通过匿名函数进行了累加。</p><p>设定初始值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定初始参数：</span></span><br><span class="line">s = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>], <span class="string">"数字 = "</span>)</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># print out： 数字 = 12345</span></span><br></pre></td></tr></table></figure><p>需要注意的是：序列数据类型需要和初始参数一致。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true.</p></blockquote><p> <code>filter()</code>  函数用来过滤序列中不符合条件的值，返回一个迭代器，该迭代器生成那些函数(项)为true的iterable项。如果函数为None，则返回为true的项。定义如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(function or None, iterable) --&gt; filter object</span><br></pre></td></tr></table></figure><ul><li><code>function or None</code>  # 过滤操作执行的函数</li><li><code>iterable</code>  # 需要过滤的序列</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boy</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line">filterList = filter(boy, list(range(<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line">print(list(filterList))</span><br><span class="line"><span class="comment"># print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line">filterList2 = filter(<span class="keyword">lambda</span> n: n % <span class="number">2</span> == <span class="number">0</span>, list(range(<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line">print(list(filterList2))</span><br><span class="line"><span class="comment"># print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure><p>上面我们可以看到，列表中不能被  <code>2</code>  整除的数据都被排除了。</p><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><blockquote><p>Return a new list containing all items from the iterable in ascending order.</p></blockquote><blockquote><p>A custom key function can be supplied to customize the sort order, and the reverse flag can be set to request the result in descending order.</p></blockquote><p>  <code>sorted</code>  函数默认将序列升序排列后返回一个新的 list，还可以自定义键函数来进行排序，也可以设置  <code>reverse</code>  参数确定是升序还是降序，如果  <code>reverse = True</code>  则为降序。函数定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted</span><span class="params">(iterable: Iterable[_T], *,</span></span></span><br><span class="line"><span class="function"><span class="params">           key: Optional[Callable[[_T], Any]] = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">           reverse: bool = ...)</span> -&gt; List[_T]:</span> ...</span><br></pre></td></tr></table></figure><ul><li><code>iterable</code>  # 序列</li><li><code>key</code>  # 可以用来计算的排序函数。</li><li><code>reverse</code>  # 排序规则，reverse = True降序，reverse = False 升序(默认）。</li></ul><p>举个简单例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list01 = [<span class="number">5</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">-11</span>, <span class="number">2</span>]</span><br><span class="line">list02 = [<span class="string">'apple'</span>, <span class="string">'pig'</span>, <span class="string">'monkey'</span>, <span class="string">'money'</span>]</span><br><span class="line"></span><br><span class="line">print(sorted(list01))</span><br><span class="line"><span class="comment"># print out: [-11, -7, -1, 2, 3, 5, 6, 8]</span></span><br><span class="line"></span><br><span class="line">print(sorted(list01, key=abs))</span><br><span class="line"><span class="comment"># print out: [-1, 2, 3, 5, 6, -7, 8, -11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认升序</span></span><br><span class="line">print(sorted(list02))</span><br><span class="line"><span class="comment"># print out: ['apple', 'money', 'monkey', 'pig']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序</span></span><br><span class="line">print(sorted(list02, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># print out: ['pig', 'monkey', 'money', 'apple']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数排序</span></span><br><span class="line">print(sorted(list02, key=<span class="keyword">lambda</span> x: len(x), reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># print out: ['monkey', 'apple', 'money', 'pig']</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上我们简单的介绍了几个常用的高阶函数的使用，当然还有很多的高阶函数我们可以去研究，比如  <code>zip</code>  函数等，希望此节的介绍对大家有所帮助。</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/luhanlin/python_study/tree/master/com/luhanlin/function" rel="external nofollow noopener noreferrer" target="_blank">python 高阶函数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python.png&quot; alt=&quot;python 高阶函数&quot;&gt;&lt;/p&gt;
&lt;p&gt;函数式编程现在逐渐被广大开发群体接受，越来越多的开发者门开始使用这种优雅的开发模式，而我们使用函数式编程最主要的是需要清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是高阶函数（&lt;strong&gt;Higher-order Functions&lt;/strong&gt;）？&lt;/li&gt;
&lt;li&gt;Python 中高阶函数有哪些？要怎么用？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="python" scheme="http://funnylu.top/categories/python/"/>
    
    
      <category term="python" scheme="http://funnylu.top/tags/python/"/>
    
      <category term="大数据" scheme="http://funnylu.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数之参数</title>
    <link href="http://funnylu.top/python/20190918-%E5%87%BD%E6%95%B0%E4%B9%8B%E5%8F%82%E6%95%B0.html"/>
    <id>http://funnylu.top/python/20190918-函数之参数.html</id>
    <published>2019-09-18T12:59:01.000Z</published>
    <updated>2019-09-18T13:11:05.196Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/%E5%A4%A7%E8%84%91.jpeg" alt="Python 函数之参数"></p><p>定义一个函数非常简单，但是怎么定义一个函数，需要什么参数，怎么去调用却是我们需要去思考的问题。</p><p>如同大多数语言一样（如 Java），Python 也提供了多种参数的设定（如：默认值参数、关键字参数、形参等）。使用这些参数定义出来的代码，可以让我们适应不同的开放场景，也能简化我们的代码开发工作。</p><a id="more"></a><h2 id="默认值参数"><a href="#默认值参数" class="headerlink" title="默认值参数"></a>默认值参数</h2><p>我们创建一个函数，定义参数中一个或多个赋予默认值后，我们可以使用比允许的更少的参数去调用此函数，举个例子（<em>注意:以下代码都使用python3.7版本</em>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">def_param_fun</span><span class="params">(prompt, retries=<span class="number">4</span>, reminder=<span class="string">'Please try again!'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ok = input(prompt)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'y'</span>, <span class="string">'ye'</span>, <span class="string">'yes'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'n'</span>, <span class="string">'no'</span>, <span class="string">'nop'</span>, <span class="string">'nope'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        retries = retries - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid user response'</span>)</span><br><span class="line">        print(reminder)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 我们可以如下进行调用</span></span><br><span class="line">def_param_fun(<span class="string">'Do you really want to quit?'</span>)</span><br><span class="line"></span><br><span class="line">def_param_fun(<span class="string">'Do you really want to quit?'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">def_param_fun(<span class="string">'Do you really want to quit?'</span>, <span class="number">2</span>, <span class="string">'Please, yes or no!'</span>)</span><br></pre></td></tr></table></figure><p>如上所示，我们可以使用一个或多个参数去调用此函数，我们实际生产中,很多情况下会赋予函数参数默认值的情形，因此，合理使用此种参数形式可以简化我们很多工作量。</p><blockquote><p><strong>重要：使用默认值参数时，如果我们的默认值是一个可变对象时，我们调用函数可能出现不符合我们预期的结果</strong>。如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, l=[])</span>:</span></span><br><span class="line">    l.append(a)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 此时调用函数</span></span><br><span class="line">print(f(<span class="number">1</span>))</span><br><span class="line">print(f(<span class="number">2</span>))</span><br><span class="line">print(f(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><blockquote><p>这是由于函数在初始化时，默认值只会执行一次，所以在默认值为可变对象（列表、字典以及大多数类实例），我们可以如下操作：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def f(a, l=None):</span><br><span class="line">    if l is None:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(a)</span><br><span class="line">    return l</span><br><span class="line"></span><br><span class="line"># 再次调用函数</span><br><span class="line">print(f(1))</span><br><span class="line">print(f(2))</span><br><span class="line">print(f(3))</span><br><span class="line"></span><br><span class="line"># 返回值</span><br><span class="line"># [1]</span><br><span class="line"># [2]</span><br><span class="line"># [3]</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数也就是我们对于函数中定义的参数是可以一个或多个可以变化的，其中 *args代表着可以传入一个list或者tuple, **args代表着可以传入一个dict。举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">variable_fun</span><span class="params">(kind, *arguments, **keywords)</span>:</span></span><br><span class="line">    print(<span class="string">"friend : "</span>, kind, <span class="string">";"</span>)</span><br><span class="line">    print(<span class="string">"-"</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> arguments:</span><br><span class="line">        print(arg)</span><br><span class="line">    print(<span class="string">"-"</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">for</span> kw <span class="keyword">in</span> keywords:</span><br><span class="line">        print(kw, <span class="string">":"</span>, keywords[kw])</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line">variable_fun(<span class="string">"xiaoming"</span>,</span><br><span class="line">             <span class="string">"hello xiaoming"</span>, <span class="string">"nice to meet you!"</span>,</span><br><span class="line">            mother=<span class="string">"xiaoma"</span>,</span><br><span class="line">            father=<span class="string">"xiaoba"</span>,</span><br><span class="line">            son=<span class="string">"see you"</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">first arg:  xiaoming ...</span><br><span class="line">----------------------------------------</span><br><span class="line">hello </span><br><span class="line">nice to meet you!</span><br><span class="line">----------------------------------------</span><br><span class="line">mother : xiaoma</span><br><span class="line">father : xiaoba</span><br><span class="line">son : see you</span><br></pre></td></tr></table></figure><p>我们还可以使用下面的方式进行调用，得到上面相同的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list01 = [<span class="string">"hello xiaoming"</span>, <span class="string">"nice to meet you!"</span>]</span><br><span class="line">dict01 = &#123;<span class="string">'mother'</span>: <span class="string">'xiaoma'</span>, <span class="string">'father'</span>: <span class="string">'xiaoba'</span>, <span class="string">'son'</span>: <span class="string">'see you'</span>&#125;</span><br><span class="line">variable_fun(<span class="string">"xiaoming"</span>, *list01, **dict01)</span><br></pre></td></tr></table></figure><p>以上其实是python的解包操作，和java类似。</p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>关键字参数允许你调用函数时传入0个或任意个含参数名的参数，这样可以让我们灵活的去进行参数的调用。举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 借用官网例子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_fun</span><span class="params">(voltage, state=<span class="string">'a stiff'</span>, action=<span class="string">'voom'</span>, type=<span class="string">'Norwegian Blue'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"-- This key_fun wouldn't"</span>, action, end=<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">"if you put"</span>, voltage, <span class="string">"volts through it."</span>)</span><br><span class="line">    print(<span class="string">"-- Lovely plumage, the"</span>, type)</span><br><span class="line">    print(<span class="string">"-- It's"</span>, state, <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用  </span></span><br><span class="line">key_fun(<span class="number">1000</span>)                                          <span class="comment"># 1 positional argument</span></span><br><span class="line">key_fun(voltage=<span class="number">1000</span>)                                  <span class="comment"># 1 keyword argument</span></span><br><span class="line">key_fun(voltage=<span class="number">1000000</span>, action=<span class="string">'VOOOOOM'</span>)             <span class="comment"># 2 keyword arguments</span></span><br><span class="line">key_fun(action=<span class="string">'VOOOOOM'</span>, voltage=<span class="number">1000000</span>)             <span class="comment"># 2 keyword arguments</span></span><br><span class="line">key_fun(<span class="string">'a million'</span>, <span class="string">'bereft of life'</span>, <span class="string">'jump'</span>)         <span class="comment"># 3 positional arguments</span></span><br><span class="line">key_fun(<span class="string">'a thousand'</span>, state=<span class="string">'pushing up the daisies'</span>)  <span class="comment"># 1 positional, 1 keyword</span></span><br></pre></td></tr></table></figure><blockquote><p>注意不可以重复传值,否则会报如下错误:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># TypeError: key_fun() got multiple values for argument &apos;voltage&apos;</span><br><span class="line">key_fun(100, voltage=1000)                             # error</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节主要简单的介绍了python中函数参数的使用，设定的方式可以配合使用，但是也不要过多的去设计，否则会造成函数的可读性变的很差。</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/luhanlin/python_study/tree/master/com/luhanlin/function" rel="external nofollow noopener noreferrer" target="_blank">python中函数的参数设定</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/%E5%A4%A7%E8%84%91.jpeg&quot; alt=&quot;Python 函数之参数&quot;&gt;&lt;/p&gt;
&lt;p&gt;定义一个函数非常简单，但是怎么定义一个函数，需要什么参数，怎么去调用却是我们需要去思考的问题。&lt;/p&gt;
&lt;p&gt;如同大多数语言一样（如 Java），Python 也提供了多种参数的设定（如：默认值参数、关键字参数、形参等）。使用这些参数定义出来的代码，可以让我们适应不同的开放场景，也能简化我们的代码开发工作。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://funnylu.top/categories/python/"/>
    
    
      <category term="python" scheme="http://funnylu.top/tags/python/"/>
    
      <category term="大数据" scheme="http://funnylu.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python 流程控制</title>
    <link href="http://funnylu.top/python/20190916-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"/>
    <id>http://funnylu.top/python/20190916-流程控制.html</id>
    <published>2019-09-16T05:45:30.000Z</published>
    <updated>2019-09-18T13:14:21.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python%E7%8C%AB.jpg" alt="Python 流程控制 不要看我"></p><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。<br><a id="more"></a></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>流程控制语句中可能最为人所熟知的编程语句就是 if 语句了，if 语句用于有条件的执行，语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if_stmt ::=  &quot;if&quot; expression &quot;:&quot; suite</span><br><span class="line">             (&quot;elif&quot; expression &quot;:&quot; suite)*</span><br><span class="line">             [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure></p><p>它通过对表达式逐个求值直至找到一个真值在子句体中选择唯一匹配的一个；然后执行该子句体（而且 if 语句的其他部分不会被执行或求值）。 如果所有表达式均为假值，则如果 else 子句体如果存在就会被执行。<br>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = int(input(&quot;Please enter an integer: &quot;))</span><br><span class="line"></span><br><span class="line"># TypeError: can only concatenate str (not &quot;int&quot;) to str</span><br><span class="line"># print(&quot;输入的值为：&quot; + x) </span><br><span class="line">print(&apos;输入的值为：&apos; + str(x))</span><br><span class="line"></span><br><span class="line">if x &lt; 0:</span><br><span class="line">    x = 0</span><br><span class="line">    print(&apos;输入数字不可以小于0&apos;)</span><br><span class="line">elif x == 0:</span><br><span class="line">    print(&apos;zero&apos;)</span><br><span class="line">elif x == 1:</span><br><span class="line">    print(&apos;one&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;other&apos;)</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for 语句用于对序列（例如字符串、元组或列表）或其他可迭代对象中的元素进行迭代，语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_stmt ::=  &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite</span><br><span class="line">              [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure></p><p>for循环可以遍历任何序列的项目，如一个列表或者一个字符串，举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Measure some strings:</span><br><span class="line">words = [&apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]</span><br><span class="line">for w in words:</span><br><span class="line">    print(w, len(w))</span><br><span class="line"># output:</span><br><span class="line">#cat 3</span><br><span class="line">#window 6</span><br><span class="line">#defenestrate 12</span><br><span class="line"></span><br><span class="line">for w in words[:]:  # Loop over a slice copy of the entire list.</span><br><span class="line">    if len(w) &gt; 6:</span><br><span class="line">        words.insert(0, w)</span><br><span class="line"></span><br><span class="line">print(words)</span><br><span class="line"># output:</span><br><span class="line"># [&apos;defenestrate&apos;, &apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]</span><br></pre></td></tr></table></figure><p>如果你确实需要遍历一个数字序列，可以使用 <em>rang()</em> 函数，例如计算100以内数字之和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br><span class="line"># output: </span><br><span class="line"># 5050</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>与 for 循环对应的就是 while 循环，while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务.举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 裴波那契数列</span><br><span class="line">a = 0</span><br><span class="line">b = 1</span><br><span class="line">while a &lt; 100:</span><br><span class="line">    print(a, end=&apos;,&apos;)</span><br><span class="line">    a = b</span><br><span class="line">    b = a+b</span><br><span class="line"># 0,1,1,2,3,5,8,13,21,34,55,89,</span><br></pre></td></tr></table></figure><p>while 与 else 结合使用，与if 条件判断一样类似，在上面例子基础上加上else：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 裴波那契数列</span><br><span class="line">a, b = 0, 1</span><br><span class="line">while a &lt; 100:</span><br><span class="line">    print(a, end=&apos;,&apos;)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">else:</span><br><span class="line">    print(&apos;\nwhile ... else test&apos;)</span><br><span class="line"># 0,1,1,2,3,5,8,13,21,34,55,89,</span><br><span class="line"># while ... else test</span><br></pre></td></tr></table></figure><blockquote><p>注：for 循环与 while 循环都可以与关键字 else 结合使用。</p></blockquote><h3 id="break-与-continue-关键字"><a href="#break-与-continue-关键字" class="headerlink" title="break 与 continue 关键字"></a>break 与 continue 关键字</h3><blockquote><p>break 语句，与java类似，用于跳出最近的 for 或 while 循环。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># beak test</span><br><span class="line">for a in range(100001):</span><br><span class="line">    if a &gt; 1000:</span><br><span class="line">        print(a)</span><br><span class="line">        break</span><br><span class="line"># 1001</span><br></pre></td></tr></table></figure><blockquote><p>continue 语句也与java类似，表示继续循环中的下一次迭代。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># continue test</span><br><span class="line">for y in range(1, 5):</span><br><span class="line">    if y % 2 == 0:</span><br><span class="line">        print(&apos;continue test &apos;, y)</span><br><span class="line">        continue</span><br><span class="line">    print(&apos;normal print &apos;, y)</span><br><span class="line"># normal print  1</span><br><span class="line"># continue test  2</span><br><span class="line"># normal print  3</span><br><span class="line"># continue test  4</span><br></pre></td></tr></table></figure><h3 id="pass-关键字"><a href="#pass-关键字" class="headerlink" title="pass 关键字"></a>pass 关键字</h3><p>pass 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    pass  # Busy-wait for keyboard interrupt (Ctrl+C)</span><br></pre></td></tr></table></figure><p>这通常用于创建最小的类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyEmptyClass:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>pass 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件子句体的占位符，允许你保持在更抽象的层次上进行思考。（类似于java中的抽象方法） pass 会被静默地忽略:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def initlog(*args):</span><br><span class="line">    pass   # Remember to implement this!</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程控制中的条件判断和循环执行重复计算是我们开发软件的必备基础，本节参考官网列举了python中循环控制语句常用的关键字和使用技巧，大家一起共勉。</p><h2 id="代码地址："><a href="#代码地址：" class="headerlink" title="代码地址："></a>代码地址：</h2><p><a href="https://github.com/luhanlin/python_study/tree/master/com/luhanlin/controflow" rel="external nofollow noopener noreferrer" target="_blank">Python 流程控制代码地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/python%E7%8C%AB.jpg&quot; alt=&quot;Python 流程控制 不要看我&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://funnylu.top/categories/python/"/>
    
    
      <category term="python" scheme="http://funnylu.top/tags/python/"/>
    
      <category term="大数据" scheme="http://funnylu.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Having a joke</title>
    <link href="http://funnylu.top/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97/20190509-joke.html"/>
    <id>http://funnylu.top/生活杂志/20190509-joke.html</id>
    <published>2019-05-09T12:16:41.930Z</published>
    <updated>2019-05-15T12:55:32.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/head.jpeg" alt="test"><br><strong>有趣的测试 一个都比的日常</strong></p><a id="more"></a><h2 id="微信撩妹套路之经典开场白"><a href="#微信撩妹套路之经典开场白" class="headerlink" title="微信撩妹套路之经典开场白"></a>微信撩妹套路之经典开场白</h2><hr><h3 id="声东击西法"><a href="#声东击西法" class="headerlink" title="声东击西法"></a>声东击西法</h3><ul><li>给她发去三个字“你神经”或者你坏蛋，对方这时肯定会觉得纳闷，一定会回复你。虽然你不认识她，但是为了引起她的注意，这是一个不错的选择。</li></ul><h3 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h3><ul><li>如你的第几张相片好像是传说中的几，或者你第几张图的这个地方我也有去过，你的第几张图的那个东西在哪买的等等，记住，说完后一定要加上自己的感受和见解(这个开场白一般适用于图片有亮点的女生)。</li></ul><h3 id="赞美和关心"><a href="#赞美和关心" class="headerlink" title="赞美和关心"></a>赞美和关心</h3><ul><li>有的女生的图片中有小狗小猫，还有小朋友的，可以适当的赞美一下，你的小狗好可爱阿，样子好萌，有多大了?小朋友好可爱哦，看你的样子应该是很喜欢小朋友的吧/你的样子很和善，应该很受小朋友喜欢吧。记住，赞美完后，一定要问对方的意见和看法。不然有的女生在你赞美完她过后，她会认为你是在故意恭维她，一般会看都不看就略过了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://funnylu-1259196254.cos.ap-beijing.myqcloud.com/head.jpeg&quot; alt=&quot;test&quot;&gt;&lt;br&gt;&lt;strong&gt;有趣的测试 一个都比的日常&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活杂志" scheme="http://funnylu.top/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97/"/>
    
    
      <category term="日常" scheme="http://funnylu.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
