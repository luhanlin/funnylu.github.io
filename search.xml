<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 高阶函数]]></title>
    <url>%2Fpython%2F20190928-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[函数式编程现在逐渐被广大开发群体接受，越来越多的开发者门开始使用这种优雅的开发模式，而我们使用函数式编程最主要的是需要清楚： 什么是高阶函数（Higher-order Functions）？ Python 中高阶函数有哪些？要怎么用？ 高阶函数概念在函数式编程中，我们可以将函数当作变量一样自由使用。一个函数接收另一个函数作为参数，这种函数称之为高阶函数。 举个例子： 12def high_func(f, arr): return [f(x) for x in arr] 上面的例子中， high_func 就是一个高阶函数。其中第一个参数 f 是一个函数，第二个参数 arr 是一个数组，返回的值是数组中的所有的值在经过 f 函数计算后得到的一个列表。例如： 123456789101112131415from math import factorialdef high_func(f, arr): return [f(x) for x in arr]def square(n): return n ** 2# 使用python自带数学函数print(high_func(factorial, list(range(10))))# print out: [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]# 使用自定义函数print(high_func(square, list(range(10))))# print out: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] Python 常用高阶函数如同java、scala等语言，我们很多常用的高阶函数基本都一致。在开发中我们经常使用的最基本的高阶函数其实就几个，而我们也可以基于这些函数去进行适当的扩展，那么下面开始介绍几种常用的高阶函数。 map Make an iterator that computes the function using arguments from each of the iterables. Stops when the shortest iterable is exhausted. 根据提供的函数对指定序列做映射, 并返回映射后的序列，定义： 1map(func, *iterables) --&gt; map object function # 序列中的每个元素需要执行的操作, 可以是匿名函数 *iterables # 一个或多个序列 正如前面所举的例子 high_func 函数， map 函数是 high_func 函数高阶版，可以传入一个函数和多个序列。 1234567891011121314from math import factorialdef square(n): return n ** 2# 使用python自带数学函数facMap = map(factorial, list(range(10)))print(list(facMap))# print out: [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]# 使用自定义函数squareMap = map(square, list(range(10)))print(list(squareMap))# print out: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] 可以看到输出了同样的结果，只是与 python2.X 不用的是， python3.X 中返回 map 类，而前者直接返回一个列表。 我们使用匿名函数，也可以传入多个序列，如下 123456789# 使用匿名函数lamMap = map(lambda x: x * 2, list(range(10)))print(list(lamMap))# print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]# 传入多个序列mutiMap = map(lambda x, y: x+y, list(range(10)), list(range(11, 15)))print(list(mutiMap))# print out: [11, 13, 15, 17] reduce Apply a function of two arguments cumulatively to the items of a sequence,from left to right, so as to reduce the sequence to a single value. 大致上来讲， reduce 函数需要传入一个有两个参数的函数，然后用这个函数从左至右顺序遍历序列并生成结果，定义如下： 1reduce(function, sequence[, initial]) -&gt; value function # 函数, 序列中的每个元素需要执行的操作, 可以是匿名函数 sequence # 需要执行操作的序列 initial # 可选，初始参数 最后返回函数的计算结果, 和初始参数类型相同 简单举个例子： 1234567# 注意，现在 reduce() 函数已经放入到functools包中。from functools import reduceresult = reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])print(result)# print out 15 我们可以看到，序列 [1, 2, 3, 4, 5] 通过匿名函数进行了累加。 设定初始值： 12345# 设定初始参数：s = reduce(lambda x, y: x + y, ['1', '2', '3', '4', '5'], "数字 = ")print(s)# print out： 数字 = 12345 需要注意的是：序列数据类型需要和初始参数一致。 filter Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true. filter() 函数用来过滤序列中不符合条件的值，返回一个迭代器，该迭代器生成那些函数(项)为true的iterable项。如果函数为None，则返回为true的项。定义如下： 1filter(function or None, iterable) --&gt; filter object function or None # 过滤操作执行的函数 iterable # 需要过滤的序列 举个例子： 12345678910111213141516def boy(n): if n % 2 == 0: return True return False# 自定义函数filterList = filter(boy, list(range(20)))print(list(filterList))# print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]# 自定义函数filterList2 = filter(lambda n: n % 2 == 0, list(range(20)))print(list(filterList2))# print out: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 上面我们可以看到，列表中不能被 2 整除的数据都被排除了。 sorted Return a new list containing all items from the iterable in ascending order. A custom key function can be supplied to customize the sort order, and the reverse flag can be set to request the result in descending order. sorted 函数默认将序列升序排列后返回一个新的 list，还可以自定义键函数来进行排序，也可以设置 reverse 参数确定是升序还是降序，如果 reverse = True 则为降序。函数定义如下： 123def sorted(iterable: Iterable[_T], *, key: Optional[Callable[[_T], Any]] = ..., reverse: bool = ...) -&gt; List[_T]: ... iterable # 序列 key # 可以用来计算的排序函数。 reverse # 排序规则，reverse = True降序，reverse = False 升序(默认）。 举个简单例子： 1234567891011121314151617181920list01 = [5, -1, 3, 6, -7, 8, -11, 2]list02 = ['apple', 'pig', 'monkey', 'money']print(sorted(list01))# print out: [-11, -7, -1, 2, 3, 5, 6, 8]print(sorted(list01, key=abs))# print out: [-1, 2, 3, 5, 6, -7, 8, -11]# 默认升序print(sorted(list02))# print out: ['apple', 'money', 'monkey', 'pig']# 降序print(sorted(list02, reverse=True))# print out: ['pig', 'monkey', 'money', 'apple']# 匿名函数排序print(sorted(list02, key=lambda x: len(x), reverse=True))# print out: ['monkey', 'apple', 'money', 'pig'] 总结以上我们简单的介绍了几个常用的高阶函数的使用，当然还有很多的高阶函数我们可以去研究，比如 zip 函数等，希望此节的介绍对大家有所帮助。 代码地址python 高阶函数]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 函数之参数]]></title>
    <url>%2Fpython%2F20190918-%E5%87%BD%E6%95%B0%E4%B9%8B%E5%8F%82%E6%95%B0.html</url>
    <content type="text"><![CDATA[定义一个函数非常简单，但是怎么定义一个函数，需要什么参数，怎么去调用却是我们需要去思考的问题。 如同大多数语言一样（如 Java），Python 也提供了多种参数的设定（如：默认值参数、关键字参数、形参等）。使用这些参数定义出来的代码，可以让我们适应不同的开放场景，也能简化我们的代码开发工作。 默认值参数我们创建一个函数，定义参数中一个或多个赋予默认值后，我们可以使用比允许的更少的参数去调用此函数，举个例子（注意:以下代码都使用python3.7版本）： 123456789101112131415161718def def_param_fun(prompt, retries=4, reminder='Please try again!'): while True: ok = input(prompt) if ok in ('y', 'ye', 'yes'): return True if ok in ('n', 'no', 'nop', 'nope'): return False retries = retries - 1 if retries &lt; 0: raise ValueError('invalid user response') print(reminder) # 我们可以如下进行调用def_param_fun('Do you really want to quit?')def_param_fun('Do you really want to quit?', 2)def_param_fun('Do you really want to quit?', 2, 'Please, yes or no!') 如上所示，我们可以使用一个或多个参数去调用此函数，我们实际生产中,很多情况下会赋予函数参数默认值的情形，因此，合理使用此种参数形式可以简化我们很多工作量。 重要：使用默认值参数时，如果我们的默认值是一个可变对象时，我们调用函数可能出现不符合我们预期的结果。如下： 12345678910111213def f(a, l=[]): l.append(a) return l # 此时调用函数print(f(1))print(f(2))print(f(3))# 返回值# [1]# [1, 2]# [1, 2, 3] 这是由于函数在初始化时，默认值只会执行一次，所以在默认值为可变对象（列表、字典以及大多数类实例），我们可以如下操作： 123456789101112131415def f(a, l=None): if l is None: l = [] l.append(a) return l# 再次调用函数print(f(1))print(f(2))print(f(3))# 返回值# [1]# [2]# [3] 可变参数可变参数也就是我们对于函数中定义的参数是可以一个或多个可以变化的，其中 *args代表着可以传入一个list或者tuple, **args代表着可以传入一个dict。举个例子： 12345678910111213141516171819202122232425def variable_fun(kind, *arguments, **keywords): print("friend : ", kind, ";") print("-" * 40) for arg in arguments: print(arg) print("-" * 40) for kw in keywords: print(kw, ":", keywords[kw]) # 函数调用variable_fun("xiaoming", "hello xiaoming", "nice to meet you!", mother="xiaoma", father="xiaoba", son="see you") # 输出结果first arg: xiaoming ...----------------------------------------hello nice to meet you!----------------------------------------mother : xiaomafather : xiaobason : see you 我们还可以使用下面的方式进行调用，得到上面相同的结果： 123list01 = ["hello xiaoming", "nice to meet you!"]dict01 = &#123;'mother': 'xiaoma', 'father': 'xiaoba', 'son': 'see you'&#125;variable_fun("xiaoming", *list01, **dict01) 以上其实是python的解包操作，和java类似。 关键字参数关键字参数允许你调用函数时传入0个或任意个含参数名的参数，这样可以让我们灵活的去进行参数的调用。举个例子： 1234567891011121314# 借用官网例子def key_fun(voltage, state='a stiff', action='voom', type='Norwegian Blue'): print("-- This key_fun wouldn't", action, end=' ') print("if you put", voltage, "volts through it.") print("-- Lovely plumage, the", type) print("-- It's", state, "!")# 函数调用 key_fun(1000) # 1 positional argumentkey_fun(voltage=1000) # 1 keyword argumentkey_fun(voltage=1000000, action='VOOOOOM') # 2 keyword argumentskey_fun(action='VOOOOOM', voltage=1000000) # 2 keyword argumentskey_fun('a million', 'bereft of life', 'jump') # 3 positional argumentskey_fun('a thousand', state='pushing up the daisies') # 1 positional, 1 keyword 注意不可以重复传值,否则会报如下错误: 12# TypeError: key_fun() got multiple values for argument &apos;voltage&apos;key_fun(100, voltage=1000) # error 总结本节主要简单的介绍了python中函数参数的使用，设定的方式可以配合使用，但是也不要过多的去设计，否则会造成函数的可读性变的很差。 代码地址python中函数的参数设定]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 流程控制]]></title>
    <url>%2Fpython%2F20190916-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</url>
    <content type="text"><![CDATA[在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。 条件语句if语句流程控制语句中可能最为人所熟知的编程语句就是 if 语句了，if 语句用于有条件的执行，语法如下:123if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite (&quot;elif&quot; expression &quot;:&quot; suite)* [&quot;else&quot; &quot;:&quot; suite] 它通过对表达式逐个求值直至找到一个真值在子句体中选择唯一匹配的一个；然后执行该子句体（而且 if 语句的其他部分不会被执行或求值）。 如果所有表达式均为假值，则如果 else 子句体如果存在就会被执行。举个例子： 123456789101112131415x = int(input(&quot;Please enter an integer: &quot;))# TypeError: can only concatenate str (not &quot;int&quot;) to str# print(&quot;输入的值为：&quot; + x) print(&apos;输入的值为：&apos; + str(x))if x &lt; 0: x = 0 print(&apos;输入数字不可以小于0&apos;)elif x == 0: print(&apos;zero&apos;)elif x == 1: print(&apos;one&apos;)else: print(&apos;other&apos;) 循环语句for循环for 语句用于对序列（例如字符串、元组或列表）或其他可迭代对象中的元素进行迭代，语法如下:12for_stmt ::= &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite [&quot;else&quot; &quot;:&quot; suite] for循环可以遍历任何序列的项目，如一个列表或者一个字符串，举个例子： 12345678910111213141516# Measure some strings:words = [&apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]for w in words: print(w, len(w))# output:#cat 3#window 6#defenestrate 12for w in words[:]: # Loop over a slice copy of the entire list. if len(w) &gt; 6: words.insert(0, w)print(words)# output:# [&apos;defenestrate&apos;, &apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;] 如果你确实需要遍历一个数字序列，可以使用 rang() 函数，例如计算100以内数字之和： 123456sum = 0for x in range(101): sum = sum + xprint(sum)# output: # 5050 while循环与 for 循环对应的就是 while 循环，while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务.举个例子： 12345678# 裴波那契数列a = 0b = 1while a &lt; 100: print(a, end=&apos;,&apos;) a = b b = a+b# 0,1,1,2,3,5,8,13,21,34,55,89, while 与 else 结合使用，与if 条件判断一样类似，在上面例子基础上加上else： 123456789# 裴波那契数列a, b = 0, 1while a &lt; 100: print(a, end=&apos;,&apos;) a, b = b, a+belse: print(&apos;\nwhile ... else test&apos;)# 0,1,1,2,3,5,8,13,21,34,55,89,# while ... else test 注：for 循环与 while 循环都可以与关键字 else 结合使用。 break 与 continue 关键字 break 语句，与java类似，用于跳出最近的 for 或 while 循环。例如： 123456# beak testfor a in range(100001): if a &gt; 1000: print(a) break# 1001 continue 语句也与java类似，表示继续循环中的下一次迭代。例如： 12345678910# continue testfor y in range(1, 5): if y % 2 == 0: print(&apos;continue test &apos;, y) continue print(&apos;normal print &apos;, y)# normal print 1# continue test 2# normal print 3# continue test 4 pass 关键字pass 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它。例如: 12while True: pass # Busy-wait for keyboard interrupt (Ctrl+C) 这通常用于创建最小的类: 12class MyEmptyClass: pass pass 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件子句体的占位符，允许你保持在更抽象的层次上进行思考。（类似于java中的抽象方法） pass 会被静默地忽略: 12def initlog(*args): pass # Remember to implement this! 总结流程控制中的条件判断和循环执行重复计算是我们开发软件的必备基础，本节参考官网列举了python中循环控制语句常用的关键字和使用技巧，大家一起共勉。 代码地址：Python 流程控制代码地址]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Having a joke]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97%2F20190509-joke.html</url>
    <content type="text"><![CDATA[有趣的测试 一个都比的日常 微信撩妹套路之经典开场白 声东击西法 给她发去三个字“你神经”或者你坏蛋，对方这时肯定会觉得纳闷，一定会回复你。虽然你不认识她，但是为了引起她的注意，这是一个不错的选择。 看图说话 如你的第几张相片好像是传说中的几，或者你第几张图的这个地方我也有去过，你的第几张图的那个东西在哪买的等等，记住，说完后一定要加上自己的感受和见解(这个开场白一般适用于图片有亮点的女生)。 赞美和关心 有的女生的图片中有小狗小猫，还有小朋友的，可以适当的赞美一下，你的小狗好可爱阿，样子好萌，有多大了?小朋友好可爱哦，看你的样子应该是很喜欢小朋友的吧/你的样子很和善，应该很受小朋友喜欢吧。记住，赞美完后，一定要问对方的意见和看法。不然有的女生在你赞美完她过后，她会认为你是在故意恭维她，一般会看都不看就略过了。]]></content>
      <categories>
        <category>生活杂志</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
