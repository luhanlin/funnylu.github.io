<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 流程控制]]></title>
    <url>%2Fpython%2F20190916-null.html</url>
    <content type="text"><![CDATA[在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说程序的流程对运行结果有直接的影响。在清楚每条语句的执行流程的前提下，才能通过控制语句的执行顺序来实现我们要完成的功能。 条件语句if语句流程控制语句中可能最为人所熟知的编程语句就是 if 语句了，if 语句用于有条件的执行，语法如下:123if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite (&quot;elif&quot; expression &quot;:&quot; suite)* [&quot;else&quot; &quot;:&quot; suite] 它通过对表达式逐个求值直至找到一个真值在子句体中选择唯一匹配的一个；然后执行该子句体（而且 if 语句的其他部分不会被执行或求值）。 如果所有表达式均为假值，则如果 else 子句体如果存在就会被执行。举个例子： 123456789101112131415x = int(input(&quot;Please enter an integer: &quot;))# TypeError: can only concatenate str (not &quot;int&quot;) to str# print(&quot;输入的值为：&quot; + x) print(&apos;输入的值为：&apos; + str(x))if x &lt; 0: x = 0 print(&apos;输入数字不可以小于0&apos;)elif x == 0: print(&apos;zero&apos;)elif x == 1: print(&apos;one&apos;)else: print(&apos;other&apos;) 循环语句for循环for 语句用于对序列（例如字符串、元组或列表）或其他可迭代对象中的元素进行迭代，语法如下:12for_stmt ::= &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite [&quot;else&quot; &quot;:&quot; suite] for循环可以遍历任何序列的项目，如一个列表或者一个字符串，举个例子： 12345678910111213141516# Measure some strings:words = [&apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]for w in words: print(w, len(w))# output:#cat 3#window 6#defenestrate 12for w in words[:]: # Loop over a slice copy of the entire list. if len(w) &gt; 6: words.insert(0, w)print(words)# output:# [&apos;defenestrate&apos;, &apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;] 如果你确实需要遍历一个数字序列，可以使用 rang() 函数，例如计算100以内数字之和： 123456sum = 0for x in range(101): sum = sum + xprint(sum)# output: # 5050 while循环与 for 循环对应的就是 while 循环，while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务.举个例子： 12345678# 裴波那契数列a = 0b = 1while a &lt; 100: print(a, end=&apos;,&apos;) a = b b = a+b# 0,1,1,2,3,5,8,13,21,34,55,89, while 与 else 结合使用，与if 条件判断一样类似，在上面例子基础上加上else： 123456789# 裴波那契数列a, b = 0, 1while a &lt; 100: print(a, end=&apos;,&apos;) a, b = b, a+belse: print(&apos;\nwhile ... else test&apos;)# 0,1,1,2,3,5,8,13,21,34,55,89,# while ... else test 注：for 循环与 while 循环都可以与关键字 else 结合使用。 break 与 continue 关键字 break 语句，与java类似，用于跳出最近的 for 或 while 循环。例如： 123456# beak testfor a in range(100001): if a &gt; 1000: print(a) break# 1001 continue 语句也与java类似，表示继续循环中的下一次迭代。例如： 12345678910# continue testfor y in range(1, 5): if y % 2 == 0: print(&apos;continue test &apos;, y) continue print(&apos;normal print &apos;, y)# normal print 1# continue test 2# normal print 3# continue test 4 pass 关键字pass 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它。例如: 12while True: pass # Busy-wait for keyboard interrupt (Ctrl+C) 这通常用于创建最小的类: 12class MyEmptyClass: pass pass 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件子句体的占位符，允许你保持在更抽象的层次上进行思考。（类似于java中的抽象方法） pass 会被静默地忽略: 12def initlog(*args): pass # Remember to implement this! 总结流程控制中的条件判断和循环执行重复计算是我们开发软件的必备基础，本节参考官网列举了python中循环控制语句常用的关键字和使用技巧，大家一起共勉。 代码地址：Python 流程控制代码地址]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Having a joke]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BF%97%2F20190509-joke.html</url>
    <content type="text"><![CDATA[有趣的测试 一个都比的日常 微信撩妹套路之经典开场白 声东击西法 给她发去三个字“你神经”或者你坏蛋，对方这时肯定会觉得纳闷，一定会回复你。虽然你不认识她，但是为了引起她的注意，这是一个不错的选择。 看图说话 如你的第几张相片好像是传说中的几，或者你第几张图的这个地方我也有去过，你的第几张图的那个东西在哪买的等等，记住，说完后一定要加上自己的感受和见解(这个开场白一般适用于图片有亮点的女生)。 赞美和关心 有的女生的图片中有小狗小猫，还有小朋友的，可以适当的赞美一下，你的小狗好可爱阿，样子好萌，有多大了?小朋友好可爱哦，看你的样子应该是很喜欢小朋友的吧/你的样子很和善，应该很受小朋友喜欢吧。记住，赞美完后，一定要问对方的意见和看法。不然有的女生在你赞美完她过后，她会认为你是在故意恭维她，一般会看都不看就略过了。]]></content>
      <categories>
        <category>生活杂志</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
